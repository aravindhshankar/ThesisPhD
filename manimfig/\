import numpy as np
from functools import partial 
from manim import *

config.frame_width = 17.30 # units mm 
config.frame_height = 24.60 # units mm
config.pixel_width = int(config.frame_width * 100)
config.pixel_height = int(config.frame_height * 100)


class Hyperbolae(Scene):
	def construct(self):
		def impfun(x,y,a):
			return x**2 - y**2 - a**2 
		
		# titletext = Text('Strongly Correlated electrons in \n Sachdev-Ye-Kitaev models \n and \n Twisted Bilayer Graphene', color = BLUE, should_center=True).scale(1).align_on_border(np.array([0,1,0]),buff=0.5)
		
		titlecol = BLUE
		titlefontscale = 1.5
		namecol = BLUE
		namefontscale = 1.5
		title1 = Text('Strongly correlated electrons in', color = titlecol).scale(titlefontscale).align_on_border(np.array([0,1,0]), buff=0.5)
		title2 = Text('Sachdev-Ye-Kitaev models', color = titlecol).scale(titlefontscale).next_to(title1,DOWN)
		title3 = Text('and', color = titlecol).scale(titlefontscale).next_to(title2,DOWN)
		title4 = Text('Twisted bilayer graphene', color = titlecol).scale(titlefontscale).next_to(title3,DOWN)
		name1 = Text('Aravindh Swaminathan', color = namecol).scale(namefontscale).align_on_border(np.array([0,-1,0]), buff = 2)	
		name2 = Text('Shankar', color = namecol).scale(namefontscale).next_to(name1, DOWN)
		self.add(NumberPlane())	
		self.add(title1,title2,title3,title4)
		self.add(name1,name2)
		for aval in  np.array([1,2,3,4]):
			graph = ImplicitFunction(partial(impfun, a = aval), color=YELLOW)
			self.add(graph)
		

		######## adding the random color electrons ##########
		Erad = 0.3
		e1 = Dot([0,1,0], radius=Erad, color=RED)
		self.add(e1)

class BraceAnnotation(Scene):
    def construct(self):
        dot = Dot([-2, -1, 0])
        dot2 = Dot([2, 1, 0])
        line = Line(dot.get_center(), dot2.get_center()).set_color(ORANGE)
        b1 = Brace(line)
        b1text = b1.get_text("Horizontal distance")
        b2 = Brace(line, direction=line.copy().rotate(PI / 2).get_unit_vector())
        b2text = b2.get_tex("x-x_1")
        self.add(line, dot, dot2, b1, b2, b1text, b2text)






def main():
	BraceAnnotation()

if __name__ == '__main__':
	main()
